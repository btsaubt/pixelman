def int[2] scalar_mult_veci(int a, int[2] b) {
  int i; 
  for(i = 0; i < 2; i = i+1) {
    b[i] = b[i] * a; 
  }

  return b; 
} 

def float[2] scalar_mult_vecf(float a, float[2] b) { 
  int i; 
  for(i = 0; i < 2; i = i+1) { 
    b[i] = b[i] * a; 
    print_float(b[i]); 
  }
  
  return b; 
}

def int[2][2] scalar_mult_mati(int a, int[2][2] b) { 
  int i; 
  int j; 

  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+1) {
      b[i][j] = b[i][j] * a; 
    }
  } 
  return b; 

}  

def float[2][2] scalar_mult_matf(float a, float[2][2] b) { 
  int i; 
  int j; 

  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+1) { 
      b[i][j] = b[i][j] * a; 
    }
  } 

  return b; 
} 

def int vec_dot_producti(int[2] a, int[2] b) { 
  int sum;
  int i;
  sum = 0;
  i = 0;

  for(i = 0; i < 2; i=i+1) {
    sum = sum + (a[i] * b[i]); 
  }

  return sum; 
} 

def float vec_dot_productf(float[2] a, float[2] b) { 
  float sum;
  int i;
  sum = 0.0;
  i = 0;

  for(i = 0; i < 2; i=i+1) {
    sum = sum + (a[i] * b[i]);
  }

  return sum;
} 

(: def int[] mat_vec_multi(int[] a, int[][] b) { }:)  

def int[2] vec_vec_addi(int[2] a, int[2] b) { 
  int i; 

  for(i = 0; i < 2; i = i+1) { 
    a[i] = a[i] + b[i]; 
  } 
  return a; 
}

def float[2] vec_vec_addf(float[2] a, float[2] b) { 
  int i; 
  for(i = 0; i < sizeof(a); i = i+1) { 
    a[i] = a[i] + b[i]; 
  } 
  return a; 
} 

def int[2][2] mat_mat_add(int[2][2] a, int[2][2] b) { 
  int i;
  int j; 
  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+2) { 
      a[i][j] = a[i][j] + b[i][j]; 
    }
  } 
  return a; 
} 

def void print_farray(float[2] a) { 
  int i; 
  for(i = 0; i < 2; i = i+1) { 
    print_float(a[i]); 
  }
} 

def void print_iarray(int[2] a) { 
  int i; 
  for(i = 0; i < 2; i = i+1) { 
    print_int(a[i]); 
  }
} 

def void print_imatrix(int[2][2] a) { 
  int i; 
  int j; 

  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+1) { 
      print_int(a[i][j]); 
    }
  } 
} 

def int main() { 
  int[2] c; 
  int[2] d; 
  int b; :) scalar
  int i; :) for loop 
  int j; :) for loop
  int dot; 
  float[2] e; 
  float[2] f; 
  float f_dot; 
  int[2][2] i_m;
  int[2][2] i_m2; 
  float[2][2] f_m; 
  float[2][2] f_m2; 
  
  i_m = [| [1, 2] & [1, 2] |]; 
  i_m2 = [| [3, 4] & [5, 6] |]; 

  f_m = [| [3.0, 4.0] & [5.0, 6.0] |];
  f_m2 = [| [2.0, 1.0] & [4.0, 6.0] |]; 

  b = 5; 

  e = [2.0, 3.0]; 
  f = [4.0, 5.0]; 
  print_farray(vec_vec_addf(e, f)); 
  :) print_imatrix(mat_mat_add(i_m, i_m2)); 

  (: f_dot = vec_dot_productf(f, e); 
  print_float(f_dot); :) 

  (: c = [2, 3]; 
  d = [4, 5]; 
  print_array(vec_vec_addi(c, d)); :) 

  (: dot = vec_dot_producti(c, d); 
  print_int(dot); :) 

  (: f_m = scalar_mult_matf(b, f_m); 
  
  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+1) { 
      print_float(f_m[i][j]); 
    }
  }:) 

  (: e = [2.0, 3.0]; 
  e = scalar_mult_vecf(b, e);
  print_farray(e); :) 

  (: matrix = scalar_mult_mati(b, matrix); 
  for(i = 0; i < 2; i = i+1) { 
    for(j = 0; j < 2; j = j+1) { 
      print_int(matrix[i][j]); 
    }
  }:) 
  return 0; 

} 
